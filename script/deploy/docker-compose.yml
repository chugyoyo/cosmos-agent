version: '3.8'

services:
  # 后端服务
  backend:
    image: cosmos-agent-backend:latest
    container_name: cosmos-agent-backend
    build:
      context: ./backend
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: prod
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/cosmos_agent
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      REDIS_HOST: redis
      REDIS_PORT: 6379
      MINIO_ENDPOINT: http://minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    depends_on:
      - postgres
      - redis
      - minio
    networks:
      - cosmos-net

  # 前端服务
  frontend:
    image: cosmos-agent-frontend:latest
    container_name: cosmos-agent-frontend
    build:
      context: ./frontend
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - cosmos-net

  # PostgreSQL 16
  postgres:
    image: postgres:16
    container_name: cosmos-agent-postgres
    environment:
      POSTGRES_DB: cosmos_agent
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - cosmos-net

  # Redis
  redis:
    image: redis:7
    container_name: cosmos-agent-redis
    ports:
      - "6379:6379"
    networks:
      - cosmos-net

  # MinIO
  minio:
    image: minio/minio:latest
    container_name: cosmos-agent-minio
    command: server /data
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
    volumes:
      - miniodata:/data
    networks:
      - cosmos-net

networks:
  cosmos-net:
    driver: bridge

volumes:
  pgdata:
  miniodata: